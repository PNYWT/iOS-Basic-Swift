
import StoreKit

/*
 // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 let productIds: Set<String> = ["com.app.topup.100coins", "com.app.topup.500coins"]

 // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 Task {
     await IAPManager.shared.loadProducts(productIds: productIds)
 }
 
 ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 ForEach(IAPManager.shared.products, id: \.id) { product in
     Button("‡∏ã‡∏∑‡πâ‡∏≠ \(product.displayName) ‡∏£‡∏≤‡∏Ñ‡∏≤ \(product.price.formatted(.currency(code: product.priceFormatStyle.currencyCode ?? "USD")))") {
         Task {
             let success = await IAPManager.shared.purchaseProduct(product)
             if success {
                 print("‚úÖ ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: \(product.id)")
             }
         }
     }
 }

 ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠
 Task {
     await IAPManager.shared.restorePurchases()
 }

 */

class PaymentStoreKitManager: ObservableObject {
    
    static let shared = PaymentStoreKitManager()
    
    @Published var products: [Product] = []
    @Published var purchasedProductIDs: Set<String> = []
    
    /// ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å App Store
    func loadProducts(productIds: Set<String>) async {
        do {
            let storeProducts = try await Product.products(for: productIds)
            self.products = storeProducts
        } catch {
            print("‚ùå Failed to fetch products: \(error.localizedDescription)")
        }
    }
    
    /// ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    func purchaseProduct(_ product: Product) async -> Bool {
        do {
            let result = try await product.purchase()
            switch result {
            case .success(let verification):
                let transaction = try verification.payloadValue
                await transaction.finish()
                self.purchasedProductIDs.insert(transaction.productID)
                print("‚úÖ Purchased: \(transaction.productID)")
                return true
            case .pending:
                print("üïê Transaction pending")
                return false
            case .userCancelled:
                print("‚ùå User cancelled the purchase")
                return false
            @unknown default:
                print("‚ùå Unknown error during purchase")
                return false
            }
        } catch {
            print("‚ùå Purchase failed: \(error.localizedDescription)")
            return false
        }
    }
    
    /// ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ (Restore Purchases)
    func restorePurchases() async {
        for await result in Transaction.all {
            guard case .verified(let transaction) = result else { continue }
            DispatchQueue.main.async {
                self.purchasedProductIDs.insert(transaction.productID)
            }
            await transaction.finish()
        }
        print("‚úÖ Restored Purchases: \(purchasedProductIDs)")
    }
}
